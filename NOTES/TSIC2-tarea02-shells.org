#+TITLE: Tarea 02
#+AUTHOR: Rodrigo Francisco
#+OPTIONS: num:nil toc:nil


* Tipos de shells
/Describir para que sirven los shells y dónde se utilizan/

Una *shell*, es un interpréte de línea de comandos de Linux. Provee una interfaz para la ejecución de programas llamados /comandos/ entre el usuario y el kernel de los sistemas Unix. Por ejemplo, si un usuario ingresa =ls=, la /shell/ ejecuta dicho comando y regresa una salida en la terminal del usuario.

** Tipos de shells
*** Bourne Shell (sh)
Bourne Shell, es el primer shell de los sistemas operativos Unix, fue desarrollado en los laboratorios Bell de AT&T. Ganó popularidad por ser de naturaleza compacta y realizar operaciones de manera rápida. Es el shell por defecto en el sistema operativo Solaris. Dentro de sus desventajas se encuentra:
- No tiene implementadas operaciones logicas ni aritméticas por defecto.
- No se puede llamar a comandos ejecutados previamente
- Carece de características "comprensivas" que permitan una buena interacción con el usuario

*** GNU Bourne-Again Shell (bash)
Es la shell más popular dentro de los sistemas operativos Unix, además que fue desarrollada para ser compatible con Bourne shell. Incorpora funciones de otras shell como /Korn shell/ y /C shell/. Permite llamar nuevamente a comandos ingresados previamente, además de poder editarlos.

*** C Shell (csh)
Fue creada en la universidad de California, por Bill Joy. Fue desarrollada para incluir la funcionalidad por defecto de poder realizar operaciones lógicas y aritméticas. Fue la primera en incluir el comando =history= y los /aliases/.

*** Korn Shell (ksh)
Creada por David Korn en los laboratorios AT&T, para mejorar la Bourne shell. Además de soportar todas las funcionalidades de la Bourne Shell, se le agregan nuevas capacidades, por ejemplo, la de hacer operaciones lógicas y aritméticas. Korn Shell corre scripts diseñados para Bourne Shell, y además ofrece manipulación de cadenas, arreglos y funciones en una manera muy similar a la del lenguaje C. Además se considera más rápida que las otras shell, incluida la /C shell/

*** Z Shell (zsh)
Es una extensión de la shell sh, con toneladas de mejoras para su personalización. Es una shell moderna que presenta las siguientes características:
- Generación de nombre de archos basados en las condiciones dadas.
- Suporte para plugins y temas
- Índice de funciones por defecto
- Autocompletado de comandos

** Referencias
- Ninad Pathak. /What are the Different Types of Shells in Linux?/
  Consultado el 14 de septiembre de 2021 en https://www.journaldev.com/39194/different-types-of-shells-in-linux

* Evidencia LVM

El Administrador de volumen lógico (LVM) es un marco de asignación de dispositivos que proporciona administración de volumen lógico para el kernel de Linux.

*** Creación de una partición para LVM

Para crear una partición a partir del espacio que se dejó previamente se utiliza la herramienta conocida como =parted=

#+begin_src sh
parted
#+end_src

Dentro de de =parted=, podemos usar comandos como
- =print=, para ver las particiones del disco actual.
- =mkpart=, para crear una nueva partición.

En este caso utilizamos =mkpart= para crear la partición, y simplemente se fue utilizando el menú interactivo que este proporciona.

Para esta primera parte olvide tomar captura de pantalla, pero las particiones creadas se debe ver de la siguiente manera:

[[./t02/00.png]]

Posteriormente nos aseguramos que el sistema operativo se enteré de las nuevas particiones utiizando el siguiente comando.

#+begin_src shell
partprobe
#+end_src

Ahora, para corroborar que la partición se reconoció podemos ejectuar =lsblk=

[[./t02/01-lsblk.png]]

*** Creación de volumen físico y volumen lógico

A partir de =lsblk=, anterior se debe ubicar la partición en donde se creará el volumen físico, para nuestro caso //devsda4/

#+begin_src shell
pvcreate /dev/sda4
#+end_src

=pvcreate= crea un volumen físico en la partición que le indiquemos.

Posteriormente, se crea un grupo de volumenes, que permitirá dividir nuestro volumen físico en tantas particiones como necesitemos.

#+begin_src shell
vgcreate VG_TS /dev/sda4
#+end_src

=vgcreate= recibe un identificador, seguido de la partición donde se encuentra el volumen físico.

[[./t02/01.png]]

Se pueden listar los volumenes físicos con el comando =pvs= y los grupos de volúmenes, con el comando =vgs=

*** Creación de volúmenes lógicos

Para crear un volumen lógico se utiliza la siguiente instrucción:

#+begin_src shell
lvcreate -L 1G -n lv_cap01 VG_TS
#+end_src

=lvcreate=, puede recibir varias banderas, en este caso
- =-L= nos permite especificar el tamaño de la partición
- =-n= nos permite darle una "etiqueta" al volumen creado

Cabe resaltar que el único parámetro obligatorio a especificar es el grupo donde se creará nuestro volumen

El volumen no servirá de nada hasta que le demos un sistema de archivos, es decir, debemos formatearlo:

#+begin_src shell
mkfs.ext3 /dev/VG_TS/lv_cap01
#+end_src

Con =mkfs= podemos especificar varios sistemas de arvhivos, como por ejemplo, /ext4, fat, vfat/, etc.

Para ver que el volumen se ha creado podemos listarlo usando el siguiente comando:

#+begin_src shell
lvs
#+end_src

Obtendremos una salida similar a la siguiente:

[[./t02/02-lvs.png]]

*** Montar la partición

El último paso para poder utilizar nuestra partición es *montarla*, para lo cual creamos un directorio a nivel de raíz, como se observa a continuación:

#+begin_src shell
mkdir /cap01
mount /de/VG_TS/lv_cap01 /cap01
#+end_src

El comando =mount=, permite montar particiones o dispositivos de almacenamiento externos, su sintaxis siempre es:

#+begin_src shell
mount <FUENTE> <DESTINO>
#+end_src

Donde el /destino/ se refiere a en que directorio de nuestro sistema de archivos se quere montar.

Finalmente, para revisar que todo este correcto podemos ejecutar cualquiera de los dos comandos:

#+begin_src shell
df -h
lsblk
#+end_src

[[./t02/03.png]]

*** Se repiten los mismos pasos para cap02, cap03 y cap04

Para cap02, cap03 y cap04 se repiten los mismos pasos como se puede ver en las siguientes capturas de pantalla:

[[./t02/04.png]]

[[./t02/05.png]]

Con la práctica se observo que era más fácil crear antes todos los directorios de los puntos de montaje. Después crear todas las particiones lógicas. Posteriormente formatear todas las particiones creadas y por último montarlas. En lugar de hacer cada uno de esos pasos por cada volumen.

*** Resultado final

Al terminal el proceso podemos observar las 4 particiones solicitads debidamente montadas en sus respectivos directorios.

[[./t02/06.png]]
